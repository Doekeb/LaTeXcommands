#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import re
import fileinput
import argparse

# BUG: I don't know how to handle the @ symbol in cases of \makeatletter
# BUG: Don't find occurences which are in a comment

def get_commands(s):
    '''
    Find all commands defined in a string, creating a dictionary with list
    (pair) values, first entry defaults to 0, second entry is the line on which
    the command is defined.
    '''
    commands = {}
    i = s.find("\\newcommand")
    while i != -1:
        newline_index = s[i-1::-1].find("\n")
        comment_index = s[i-1::-1].find("%")
        if comment_index == -1 or comment_index > newline_index:
            line = len(re.findall('[^\\\\]??\\n', s[:i]))+1
            commands[get_command(s[i:])] = [0,line]
        i = s.find("\\newcommand",i+1)
    return commands

def get_command(s):
    '''
    Gets the name of the new command
    Assumes s is a string beginning with '\newcommand'
    '''
    return re.search(r"\\[a-zA-Z]*",s[11:]).group()

def count_command(command, s):
    '''
    Counts how many times command is used in string s
    '''
    return len(re.findall('\\'+command+'[^a-zA-Z]', s))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='LaTeXcommands', description='LaTeXcommands is a command cleanup utility for LaTeX.')
    parser.add_argument('filename', help='Name of the main .tex file')
    parser.add_argument('-s', '--sty', metavar='styfile', type=str,
                        help="find commands in the provided .sty file instead of the main .tex file "
                        "(count occurences in both .sty and .tex files)")
    parser.add_argument('-c', '--count', action='store_true', default=False,
                        help="count the number of occurences of each command instead of generating a list of unused commands "
                             "(this is most useful in conjunction with '-d all' or '-d used') (default: %(default)s)")
    parser.add_argument('-d', '--display', required=False, choices=['used', 'unused', 'all'], default='unused',
                        help="which commands will be displayed (default: %(default)s)")
    parser.add_argument('-l', '--lines_off', action='store_true', default=False,
                        help="suppress the display of line numbers on which the commands are defined (default: %(default)s)")
    args = parser.parse_args()
    filename = args.filename
    sty = args.sty
    count = args.count
    display = args.display
    lines = not args.lines_off

    command_filename = filename if sty==None else sty
    with open(command_filename,'r') as command_file:
        command_contents = command_file.read()
    commands = get_commands(command_contents)

    with open(filename,'r') as file:
        contents = command_contents if sty==None else command_contents + "\n" + file.read()
    for command in commands:
        commands[command][0] = count_command(command, contents)-1

    command_header = 'command'
    max_command_length = max([len(key) for key in commands]+[len(command_header)])
    format_string = '{:<%s}'%(max_command_length)
    format_header_args = (command_header,)

    if count:
        occurence_header = 'occurences'
        max_occurence_length = max([len(str(value[0])) for value in commands.values()]+[len(occurence_header)])
        format_string += '{:>%s}'%(max_occurence_length+1)
        format_header_args += (occurence_header,)

    if lines:
        line_header = 'line'
        max_line_length = max([len(str(value[1])) for value in commands.values()]+[len(line_header)])
        format_string += '{:>%s}'%(max_line_length+1)
        format_header_args += (line_header,)

    print "These are %sthe commands%s:"%("all " if display=="all" else "", " which are %s"%(display) if display!="all" else "")
    print format_string.format(*format_header_args)
    for command, value in sorted(commands.items(), cmp=lambda x,y:cmp(x[1][1],y[1][1])):
        if (display=="all") or (display=="used" and value[0] > 0) or (display=="unused" and value[0] == 0):
            format_args = (command,)
            if count:
                format_args += (value[0],)
            if lines:
                format_args += (value[1],)
            print format_string.format(*format_args)
